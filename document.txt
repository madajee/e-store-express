This repository is created as a learning exercise and directly references the postman blog with the following link: https://blog.postman.com/how-to-create-a-rest-api-with-node-js-and-express/.

1. User should able to register and login by providing the username and password. Both registration and login routes should return access token in response which should be passed as Authorization header in subsequent requests.

2. 


**************************************************************************************
---------------------------------node packages----------------------------------------
1. "express": Fast, unopinionated, minimalist web framework for Node.js.
2. "cors": Enable CORS with various options. exercise usage is quite Simple (Enable All CORS Requests).
3. "jsonwebtoken": implementation of json web tokens. exercise usage covers 
- sign with token generation using userId, username as request inputs. secret and expiry are dervied as configurations. 
- verification of the token with the secret. configurations like secret can be managed through vaults in secure implementations.
4. Persistence with ORM tool and packages. 
"sequelize": easy-to-use and promise-based nodejs ORM tool for SQLite.
"sqlite3": Asynchronous, non-blocking SQLite3 bindings for Node.js
pass in dialect as sqlite and storage path when initializing instance of sequelize
const sequelize = new Sequelize({
  dialect: "sqlite",
  storage: "data.db", // Path to the file that will store the SQLite DB.
});

